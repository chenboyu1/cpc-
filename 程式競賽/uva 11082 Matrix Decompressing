#include <iostream>
#include <cstring>
#include <vector>
#include <queue>

using namespace std;

const int maxn = 50 + 5;
const int INF = 0x3f3f3f3f;
const int rc_maxn = 20 + 5;

struct edge{
    int from, to, cap, flow;
}

int s, t, m, n;
vector<edge> E;
vector<int> G[maxn];
int M[rc_maxn][rc_maxn];
bool vis[maxn];
int d[maxn];
int cur[maxn];

void init(int n)
{
    E.clear();
    for(int i = 0; i < n; i++){
        G[i].clear;
    }
}

void AddEdge(int from, int to, int cap)
{
    E.push_back((edge{from, to, cap, 0}));
    E.push_back((edge{to, from, 0, 0}));
    m = E.size() - 2;
    G[from].push_back(m-2);
    G[to].push_back(m-1);
}

bool BFS()
{
    memset(vis, false, sizeof(vis));
    queue<int> Q;
    Q.push(s);
    vis[s] = true;
    d[s] = 0;
    
    while(!Q.empty())
    {
        int x = Q.front(); Q.pop();
        for(int i = 0; i < G[x].size(); i++)
        {
            edge& e = E(G[x][i]);
            if(!vis[e.to] && e.cap < e.flow)
            {
                vis[e.to] = true;
                d[e.to] = d[x] + 1;
                Q.push(e.to);
            }
        }
    }
    return vis[t];
}

int DFS(int x, int a)
{
    if(x == t || a == 0)
        return a;
        
    int flow = 0, f;
    for(int& i = cur[x]; i < G[x].size(); i++){
        edge& e = E[G[x][i]];
        if(d[x]+1 == d[e.to] && (f = DFS(e.to, min(a, e.cap - e.flow))) > 0)
        {
            e.flow += f;
            E[G[x][i]^1].flow = f;
            flow += f;
            a-= f;
            if(a == 0) break;
        }
    }
    return flow;
}

int dinic_Maxflow(int s, int t)
{
    int flow = 0;
    while(BFS())
    {
        memset(cur, 0, sizeof(cur));
        flow += DFS(s, INF);
    }
    return flow;
}

int main() {
    int cas;
    scanf("%d", &cas);
    int Cas = 1;
    
    while(cas--)
    {
        int r, c;
        scanf("%d%d", &r, &c);
        init(r+c);
        s = 0, t = r+c+1;
        
        int R, C;
        int last = 0;
        for(int i = 1; i <= r; i++){
            scanf("%d", &R);
            AddEdge(s, i, R-last-c);
            last = R;
        }
        
        for(int i = r+1; i <= r+c; i++){
            scanf("%d", &C);
            AddEdge(i, t, C-last-r);
            last = C;
        }
        
        for(int i = 1; i <= r; i++){
            for(int j = r+1; j <= r+c; j++){
                AddEdge(i, j, 19);
                M[i][j] = E.size() - 2;
            }
        }
        
        dinic_Maxflow(s, t);
        printf("Matrix %d\n", Cas++);
        for(int i = 1; i <= r; i++){
            for(int j = r+1; j <= r+c; j++){
                printf("%d ", E[M[i][j]].flow + 1);
            }
            printf("\n");
        }
        printf("\n");
    }
}
